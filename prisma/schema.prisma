generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  roles             Role[]  @relation("UserRoles")

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PipelineData {
  id                     Int      @id @default(autoincrement())
  date                   DateTime
  openingReading         Float
  closingReading         Float
  totalFlowRate          Float
  averageFlowrate        Float
  averageObsDensity      Float
  averageTemp            Float
  obsDen15               Float
  kgInAirPerLitre        Float
  metricTons             Float
  calcAverageTemperature Float
  totalObsDensity        Float
  volumeReductionFactor  Float
  volume20               Float
}

model ReadingLines {
  id                    Int      @id @default(autoincrement())
  date                  DateTime
  lineNo                Int
  reading               String
  flowMeter1            Float
  flowMeter2            Float
  flowRate1             Float
  flowRate2             Float
  sampleTemp            Float
  obsDensity            Float
  kgInAirPerLitre       Float
  remarks               String
  check                 String
  previousReadingMeter1 Float
  previousReadingMeter2 Float
}

model Tankage {
  id        String   @id @default(cuid())
  date      DateTime
  T1        Float
  T2        Float
  T3        Float
  T4        Float
  T5        Float
  T6        Float
  notes     String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([date])
}

model Tank {
  id             String            @id
  name           String
  capacity       Float
  product        String
  location       String
  lastInspection DateTime          @default(now())
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  levelUpdates   TankLevelUpdate[]
}

model TankLevelUpdate {
  id        String   @id @default(cuid())
  tankId    String
  level     Float
  timestamp DateTime @default(now())
  notes     String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tank      Tank     @relation(fields: [tankId], references: [id])

  @@index([tankId])
  @@index([timestamp])
}

model Shipment {
  id                       String   @id @default(cuid())
  date                     DateTime @default(now())
  vessel_id                String? @db.Text
  estimated_day_of_arrival DateTime
  supplier                 String
  cargo_metric_tons        Float
  status                   String
  progress                 Int      @default(0)
  notes                    String?  @db.Text
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  destination              String

  @@index([date])
  @@index([status])
}

model Alert {
  id        String   @id @default(cuid())
  type      String
  title     String
  message   String   @db.Text
  timestamp DateTime @default(now())
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type])
  @@index([read])
}

model User {
  id             String         @id @default(cuid())
  name           String
  email          String         @unique
  password       String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  DepartmentName String
  location       String
  phone_number   String
  notes          String
  roleId         Int?
  accounts       Account[]
  auditLogs      AuditLog[]     @relation("UserAuditLogs")
  passwordReset  PasswordReset?
  sessions       Session[]
  role           Role?          @relation("UserToRole", fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String   @unique
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Maintenance {
  id          String   @id @default(cuid())
  tankId      String
  date        DateTime
  description String   @db.Text
  technician  String
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([tankId])
  @@index([date])
}

model InventoryTransaction {
  id          String   @id @default(cuid())
  tankId      String
  date        DateTime
  type        String
  amount      Float
  description String?  @db.Text
  shipmentId  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([tankId])
  @@index([date])
  @@index([type])
}

model Role {
  id               Int          @id @default(autoincrement())
  name             String       @unique
  description      String?
  isSystem         Boolean      @default(false)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  timeRestrictions String?
  users_rel        User[]       @relation("UserToRole")
  permissions      Permission[] @relation("PermissionToRole")
  users            Account[]    @relation("UserRoles")
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roles       Role[]   @relation("PermissionToRole")
}

model AuditLog {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  userId    String?
  action    String
  resource  String
  details   String   @db.Text
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation("UserAuditLogs", fields: [userId], references: [id])

  @@index([resource])
  @@index([action])
  @@index([timestamp])
}
