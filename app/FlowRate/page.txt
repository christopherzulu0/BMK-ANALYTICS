'use client'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { ChartContainer, ChartTooltip } from '@/components/ui/chart'
import { Label } from '@/components/ui/label'
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover'
import { Switch } from '@/components/ui/switch'
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'
import { format, parseISO, startOfDay } from 'date-fns'
import { BarChart2, CalendarIcon, Download, Printer } from 'lucide-react'
import React, { useState, useMemo, useEffect, useRef } from 'react'
import { Calendar as DayPicker } from '@/components/ui/calendar'
import { CartesianGrid, Legend, ResponsiveContainer, XAxis, YAxis, Area, AreaChart } from 'recharts'
import CardHeaders from './components/CardHeader'
import { useQuery } from '@tanstack/react-query'

interface PipelineData {
  id: number
  date: Date
  openingReading: number
  closingReading: number
  totalFlowRate: number
  averageFlowrate: number
  averageObsDensity: number
  averageTemp: number
  obsDen15: number
  kgInAirPerLitre: number
  metricTons: number
  calcAverageTemperature: number
  status: string
  totalObsDensity: number
  volumeReductionFactor: number
  volume20: number
}

// Custom tooltip component
const CustomTooltip = ({ active, payload, label }: any) => {
  if (active && payload && payload.length) {
    return (
      <div className="bg-background border rounded-md shadow-md p-3 text-sm">
        <p className="font-medium mb-2">{format(new Date(label), "HH:mm")}</p>
        {payload.map((entry: any, index: number) => (
          <div key={index} className="flex items-center gap-2 mb-1">
            <div 
              className="w-3 h-3 rounded-full" 
              style={{ backgroundColor: entry.color }}
            />
            <span className="font-medium">{entry.name}:</span>
            <span>{entry.value.toFixed(2)}</span>
          </div>
        ))}
      </div>
    );
  }

  return null;
};

async function fetchPipelineData(): Promise<PipelineData[]> {
  console.log('Fetching pipeline data for volume metrics...')
  const res = await fetch('/api/pipeline-data')
  if (!res.ok) {
    throw new Error('Failed to fetch pipeline data')
  }
  const data = await res.json()
  console.log('Raw pipeline data from API:', data)
  
  return data.map((item: any) => ({
    ...item,
    date: parseISO(item.date),
    openingReading: Number(item.openingReading),
    closingReading: Number(item.closingReading),
    totalFlowRate: Number(item.totalFlowRate),
    averageFlowrate: Number(item.averageFlowrate),
    averageObsDensity: Number(item.averageObsDensity),
    averageTemp: Number(item.averageTemp),
    obsDen15: Number(item.obsDen15),
    kgInAirPerLitre: Number(item.kgInAirPerLitre),
    metricTons: Number(item.metricTons),
    calcAverageTemperature: Number(item.calcAverageTemperature),
    totalObsDensity: Number(item.totalObsDensity),
    volumeReductionFactor: Number(item.volumeReductionFactor),
    volume20: Number(item.volume20)
  }))
}

export default function FlowRateGraph() {
  const [selectedDate, setSelectedDate] = useState<Date>(startOfDay(new Date()))
  const [showChart, setShowChart] = useState(true)
  const printRef = useRef<HTMLDivElement>(null)

  const { data = [], isLoading, error } = useQuery<PipelineData[]>({
    queryKey: ['pipelineData'],
    queryFn: fetchPipelineData
  })

  // Set initial date when data is loaded
  useEffect(() => {
    if (data.length > 0) {
      console.log('Setting initial date from first data item:', data[0])
      setSelectedDate(startOfDay(data[0].date))
    }
  }, [data])

  // Filter data based on selected date
  const filteredData = useMemo(() => {
    if (!data.length) return []

    const selectedDateStr = format(selectedDate, "yyyy-MM-dd")
    console.log('Filtering with date:', selectedDateStr)

    return data.filter((item) => {
      const itemDate = item.date instanceof Date ? item.date : new Date(item.date)
      const itemDateStr = format(itemDate, 'yyyy-MM-dd')
      
      return itemDateStr === selectedDateStr
    })
  }, [data, selectedDate])

  const handleExport = () => {
    if (!filteredData.length) return

    const csvData = filteredData.map(item => ({
      Time: format(new Date(item.date), 'HH:mm'),
      'Opening Reading': item.openingReading,
      'Closing Reading': item.closingReading,
      'Total Flow Rate': item.totalFlowRate,
      'Average Flow Rate': item.averageFlowrate,
      'Metric Tons': item.metricTons
    }))

    const headers = ["Time", "Opening Reading", "Closing Reading", "Total Flow Rate", "Average Flow Rate", "Metric Tons"]
    const rows = csvData.map(item => [
      item.Time,
      item['Opening Reading'],
      item['Closing Reading'],
      item['Total Flow Rate'],
      item['Average Flow Rate'],
      item['Metric Tons'],
    ])

    const csvContent = [headers.join(","), ...rows.map(row => row.join(","))].join("\n")
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' })
    const url = URL.createObjectURL(blob)
    const link = document.createElement('a')
    link.href = url
    link.download = `flow-rate-data-${format(selectedDate, 'yyyy-MM-dd')}.csv`
    link.click()
  }

  const handlePrint = () => {
    if (printRef.current) {
      const printContents = printRef.current.innerHTML
      const originalContents = document.body.innerHTML
      document.body.innerHTML = printContents
      window.print()
      document.body.innerHTML = originalContents
      window.location.reload()
    }
  }

  return (
    <div className="h-full w-full max-w-full">
      <div className="flex flex-col space-y-4 p-4">
        <CardHeaders/>
        <div className="flex flex-col lg:flex-row justify-between items-start lg:items-center gap-4">
          <h2 className="text-2xl font-bold truncate">Flow Rate Analysis</h2>
          <div className="flex flex-col sm:flex-row items-start sm:items-center gap-2 w-full lg:w-auto">
            <Popover>
              <PopoverTrigger asChild>
                <Button variant="outline" className="w-full sm:w-[260px] justify-start text-left font-normal">
                  <CalendarIcon className="mr-2 h-4 w-4" />
                  {format(selectedDate, "d MMM yyyy")}
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-auto p-0" align="start">
                <DayPicker
                  mode="single"
                  selected={selectedDate}
                  onSelect={(date) => date && setSelectedDate(date)}
                  initialFocus
                />
              </PopoverContent>
            </Popover>
            <div className="flex items-center gap-2 w-full sm:w-auto">
              <div className="flex items-center space-x-2">
                <Switch
                  id="chart-mode"
                  checked={showChart}
                  onCheckedChange={setShowChart}
                />
                <Label htmlFor="chart-mode">
                  {showChart ? <BarChart2 className="h-4 w-4" /> : <Table className="h-4 w-4" />}
                </Label>
              </div>
              <Button size="sm" onClick={handleExport}>
                <Download className="h-4 w-4" />
              </Button>
              <Button size="sm" onClick={handlePrint}>
                <Printer className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </div>

        <Card className="print-section" ref={printRef}>
          <CardHeader className="px-6 py-4">
            <CardTitle>Flow Rate Analysis</CardTitle>
            <CardDescription>
              {format(selectedDate, "d MMMM yyyy")}
            </CardDescription>
          </CardHeader>
          <CardContent className="p-0">
            {isLoading ? (
              <div className="flex justify-center items-center h-[300px]">
                <p>Loading data...</p>
              </div>
            ) : error ? (
              <div className="flex justify-center items-center h-[300px]">
                <p className="text-red-500">Error loading data</p>
              </div>
            ) : !filteredData.length ? (
              <div className="flex justify-center items-center h-[300px]">
                <p>No data available for the selected date</p>
              </div>
            ) : showChart ? (
              <div className="w-full overflow-hidden">
                <div className="overflow-x-auto">
                  <ChartContainer 
                    className="h-[400px] min-w-[550px] p-6"
                    config={{
                      totalFlowRate: {
                        label: "Total Flow Rate",
                        color: "hsl(var(--chart-1))",
                      },
                      averageFlowrate: {
                        label: "Average Flow Rate",
                        color: "hsl(var(--chart-2))",
                      },
                      metricTons: {
                        label: "Metric Tons",
                        color: "hsl(var(--chart-3))",
                      },
                    }}
                  >
                    <ResponsiveContainer width="100%" height="100%">
                      <AreaChart data={filteredData} margin={{ top: 10, right: 20, left: 0, bottom: 40 }}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis
                          dataKey="date"
                          tickFormatter={(date) => format(new Date(date), "HH:mm")}
                          fontSize={12}
                          padding={{ left: 10, right: 10 }}
                        />
                        <YAxis fontSize={12} width={50} />
                        <ChartTooltip content={<CustomTooltip />} />
                        <Legend
                          wrapperStyle={{
                            paddingTop: 15,
                            bottom: 0,
                            marginBottom: -10
                          }}
                          verticalAlign="bottom"
                          height={36}
                        />
                        <Area
                          type="monotone"
                          dataKey="totalFlowRate"
                          stroke="hsl(var(--chart-1))"
                          fill="hsl(var(--chart-1))"
                          fillOpacity={0.2}
                          name="Total Flow Rate"
                        />
                        <Area
                          type="monotone"
                          dataKey="averageFlowrate"
                          stroke="hsl(var(--chart-2))"
                          fill="hsl(var(--chart-2))"
                          fillOpacity={0.2}
                          name="Average Flow Rate"
                        />
                        <Area
                          type="monotone"
                          dataKey="metricTons"
                          stroke="hsl(var(--chart-3))"
                          fill="hsl(var(--chart-3))"
                          fillOpacity={0.2}
                          name="Metric Tons"
                        />
                      </AreaChart>
                    </ResponsiveContainer>
                  </ChartContainer>
                </div>
              </div>
            ) : (
              <div className="w-full">
                <div className="overflow-x-auto px-6">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead className="whitespace-nowrap">Time</TableHead>
                        <TableHead className="whitespace-nowrap">Opening Reading</TableHead>
                        <TableHead className="whitespace-nowrap">Closing Reading</TableHead>
                        <TableHead className="whitespace-nowrap">Total Flow Rate</TableHead>
                        <TableHead className="whitespace-nowrap">Average Flow Rate</TableHead>
                        <TableHead className="whitespace-nowrap">Metric Tons</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {filteredData.map((item, index) => (
                        <TableRow key={index} className={index % 2 === 0 ? "bg-muted/50" : ""}>
                          <TableCell className="whitespace-nowrap font-medium">
                            {format(new Date(item.date), 'HH:mm')}
                          </TableCell>
                          <TableCell className="whitespace-nowrap">{item.openingReading}</TableCell>
                          <TableCell className="whitespace-nowrap">{item.closingReading}</TableCell>
                          <TableCell className="whitespace-nowrap">{item.totalFlowRate}</TableCell>
                          <TableCell className="whitespace-nowrap">{item.averageFlowrate}</TableCell>
                          <TableCell className="whitespace-nowrap">{item.metricTons}</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
